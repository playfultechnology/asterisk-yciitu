
; INCLUDE THE YCIITU CONFIG FILE
#include extensions_yciitu.conf
; START THE GAME
include => yciitu-start



; EXAMPLE 1 : PLAYBACK A BUILT-IN SOUNDFILE
; This example uses the "old-style" formatting in which every line
; repeats the extension number, and has an explicit priority: 1, 2, 3
; Context specifies that this rule will be followed for an internal call
[from-internal-custom]
; The first action will be to answer a call made to extension 5555
exten => 555001,1,Answer()
; Then, playback the built-in soundfile "lyrics-louie-louie" (no extension)
; Default directory for sounds is /var/lib/asterisk/sounds/en
exten => 555001,2,Playback(lyrics-louie-louie)
; And, thirdly, hang up the call
exten => 555001,3,Hangup()




; EXAMPLE 2 : PLAYBACK A CUSTOM SOUNDFILE
; This example uses more modern formatting to achieve the same functionality
; the "same" replaces the need to repeat the extension number, while
; the "n" priority automatically advances to the next
; Context specifies that this rule will be followed for an internal call
[from-internal-custom]
; The first action will be to answer a call made to extension 5556
exten => 555002,1,Answer()
; Then, playback the soundfile "La_Fin_Du_Monde" (no extension)
; saved in the "custom" subdirectory of /var/lib/asterisk/sounds/en
; Sound files should be Mono, 8000Hz sample rate, saved as 16bit PCM WAVs
 same => n,Playback(custom/La_Fin_Du_Monde)
 ; Finally, hang up the call
 same => n,Hangup()

















; EXAMPLE 3 : READ OUT A NUMBER
; Context specifies that this rule will be followed for an internal call
[from-internal-custom]
; The first action will be to answer the call
exten => 555003,1,Answer()
 ; Then, use the built-in command "SayDigits()" to read out a number
 same => n,SayDigits(1234)
 ; Finally, hang up the call
 same => n,Hangup()
















; EXAMPLE 4 : READ OUT A (VARIABLE) NUMBER 
; Values don't have to be hard-coded. In this example, the number spoken is replaced
; by a variable called "Number".
; A variable can be set by using the Set() command
; It can be retrieved and evaluated by using the ${} syntax
; Context specifies that this rule will be followed for an internal call
[from-internal-custom]
; The first action will be to answer the call
exten => 555004,1,Answer()
 ; Set a variable called "Number" to be equal to the value "123"
 same => n, Set(Number=5678)
 ; Now say the number
 same => n,SayDigits(${Number})
 ; And finally hang up the call
 same => n, Hangup()
















 ; EXAMPLE 5 : READ OUT A VARIABLE NUMBER SAVED IN A TEXT FILE
[from-internal-custom]
; The first action will be to answer the call
exten => 555005,1,Answer()
 ; Set a variable called "Number" from the contents of the file /usr/number.txt
 same => n,Set(Number=${FILE(/usr/number.txt)})
 ; Now say the number
 same => n,SayDigits(${Number})
 ; And finally hang up the call
 same => n, Hangup()












 ; EXAMPLE 6 : READ A MESSAGE USING PICOTTS (TEXT-TO-SPEECH)
 ; First need to install PicoTTS libraries:
 ; sudo apt-get install libttspico0
 ; sudo apt-get install libttspico-utils
 ; Then copy picotts.agi to /var/lib/asterisk/agi-bin
 ; Context specifies that this rule will be followed for an internal call
[from-internal-custom]
; The first action will be to answer the call
exten => 555006,1,Answer()
 ; Call the PicoTTS script with the message to be spoken
 same => n,agi(picotts.agi, "Hello. This is a message spoken by Pico", en-GB)
 ; Hang up the call
 same => n,Hangup()

 
























; EXAMPLE 6B : TELL THE TIME USING PICOTTS (TEXT-TO-SPEECH)
; Context specifies that this rule will be followed for an internal call
[from-internal-custom]
; Answer the call
exten => 5550065,1,Answer()
 ; Tell the time by formatting the global EPOCH variable
 same => n,agi(picotts.agi, "The time is ${STRFTIME(${EPOCH},,%H:%M)})", en-GB)
 ; Hang up
 same => n,Hangup()














 ; EXAMPLE 7 : READ THE CONTENTS OF A FILE USING PICOTTS (TEXT-TO-SPEECH)
 ; Context specifies that this rule will be followed for an internal call
[from-internal-custom]
; The first action will be to answer the call
exten => 555007,1,Answer()
 ; Now read a file and set the variable "data" based on its contents 
 same => n,Set(data=${FILE(/usr/secret.txt)})
 ; Call the PicoTTS script with the message to be spoken, including variable
 same => n,agi(picotts.agi, "The contents of the file is... ${data}", en-GB)
 ; Hang up the call
 same => n,Hangup()

















; EXAMPLE 8 : USE A GLOBAL VARIABLE TO COUNT NUMBER OF TIMES AN EXTENSION HAS BEEN CALLED
; Every time the number is dialled, a counter is incremented by one
; Since the variable is declared as GLOBAL(), the count is persisted between each call.
; This extension will be called from an internal extension
[from-internal-custom]
; Answer the call
exten => 555008,1,Answer()
 ; If the global "COUNTER" variable does not already exist, initialise it with the value 1
 ; if it does already exist, increment it by one
 same => n, Set(GLOBAL(COUNTER)=${IF(${EXISTS($[COUNTER])}?$[${COUNTER}+1]:1)})
 ; Now initialise a local channel variable "Plural", to make the sentence gramatically correct
 same => n,Set(Plural=${IF($[${COUNTER}>1]?"times":"time")})
 ; Use picotts text-to-speech to read out the value of the counter
 same => n,agi(picotts.agi, "You have called this number ${COUNTER} ${Plural}", en-GB)
 ; Finally, hang up the call
 same => n, Hangup()




; EXAMPLE 8b : RESET A GLOBAL VARIABLE
; This extension will be called from an internal extension
[from-internal-custom]
; Answer the extension
exten => 5550080,1,Answer()
; Set the variable "COUNTER" to null
same => n, Set(GLOBAL(COUNTER)="")
; Hang up the call
same => n, Hangup()














; EXAMPLE 9 : REQUIRE A PASSWORD TO BE AUTHENTICATED
; This extension will be called from an internal extension
[from-internal-custom]
; Answer the call
exten => 555009,1,Answer()
 ; Authenticate() gives the caller 3 chances to enter the specified password to continue
 same => n,Authenticate(123)
 ; If the correct password is entered, playback a built-in soundfile
 same => n,Playback(tt-codezone)
 ; Hang up
 same => n,Hangup()
















; EXAMPLE 10 : RECORD a user response and play it back later
; This context specfies that the extension will be called from an internal extension
[from-internal-custom]
; Answer the call
exten => 555010,1,Answer()
 ; Ask a question
 same => n,agi(picotts.agi, "So, tell me. What's your favourite colour?", en-GB)
 ; Record their reply. Parameters specify
 ; 1 second of silence will end the recording
 ; Max of 2 seconds will be recorded
 ; 'q' quiet mode will not play a beep tone when recording starts
 same => n,Record(/var/www/html/phonegame/recordings/temp%d:gsm,1,2,q)
 ; UsePicoTTS for text-to-speech
 same => n,agi(picotts.agi, "Ok, so your favourite colour is", en-GB)
 ; Play back the recorded sound file
 same => n,Playback(${RECORDED_FILE})
 ; Finally, hang up
 same => n, Hangup()


 ; EXAMPLE 11 : USER INPUT AND SWITCHING CONTEXTS
[from-internal-custom]
exten => 555011,1,Answer()
 ; Go to the "custom-submenu" context, "s" extension, and priority 1
 same => n,Goto(custom-submenu,s,1)

[custom-submenu]
; The following instruction is the "start" (s) of this context
; It's not directly associated with answering an extension
 exten => s,1,agi(picotts.agi, "Press a number!", en-GB, any)
 ; The following instruction will wait for an extension to be dialled
 same => n,WaitExten()

 ; The dial pattern _X will match any single number. 
 exten => _X,1,agi(picotts.agi, "You pressed ${EXTEN}. Now get lost!", en-GB)
  ; And finally, hang up the call
  same => n,Hangup()


[incoming-play-message]
exten => s,1,Answer()
 same => n,Wait(2)
 same => n,Playback(custom/arduino-calling)
 same => n,Hangup()



 [say-message]
exten => s,1,Answer()
 same => n,agi(picotts.agi, "${MESSAGE}", en-GB, any)
 same => n,Hangup()